#pragma once
#include "icg_helper.h"

class ScreenQuad {

    private:
        GLuint vertex_array_id_;        // vertex array object
        GLuint program_id_;             // GLSL shader program ID
        GLuint vertex_buffer_object_;   // memory buffer

        float offset_x_ = 100;
        float offset_y_ = 100;

        float screenquad_width_;
        float screenquad_height_;

        int subdivision_ = 2;
        float amplitude_ = 13.5269;

        float lacunarity_ =  4.25;
        int octaves_ = 8;

        float sub_multiplier_ = 3.17814;

        GLfloat x_[441] = { 0.5234375, -0.90625, -0.3671875, 0.4765625, 0.9609375, 0.9921875, 0.4140625, -0.8046875, -0.234375, -0.7578125, -0.1484375, -0.9609375, 0.6796875, -0.09375, -0.9140625, 0.484375, 0.28125, 0.859375, 0.2734375, -0.46875, 0.625, -0.703125, -0.5859375, -1, 0.1796875, 0.65625, 0.765625, -0.1328125, 0.9453125, -0.5, -0.9296875, 0.5703125, 0.890625, -0.7734375, -0.1171875, 0.5546875, 0.1953125, 0.90625, -0.7890625, -0.6796875, 0.5703125, 0.359375, -0.3203125, -0.53125, -0.8125, -0.09375, 0.15625, 0.7578125, -0.3359375, 0.15625, 0.078125, -0.6953125, 0.8984375, -0.6640625, -0.9375, 0.921875, 0.8203125, -0.828125, -0.84375, 0.0859375, 0.984375, -0.28125, -0.703125, 0.421875, 0.2578125, 0.203125, 0.8515625, -0.6875, -0.96875, 0.7421875, 0.4140625, -0.828125, -0.1640625, 0.1328125, 0.390625, 0.5, 0.421875, 0.421875, 0.8828125, -0.3671875, 0.4140625, 0.4453125, -0.0078125, 0.953125, -0.625, -0.9140625, 0.2109375, -0.2421875, 0.1015625, -0.9765625, -0.4921875, -0.1484375, -0.4140625, -0.9921875, 0.765625, -0.9609375, -0.5078125, -0.78125, -0.859375, 0.1953125, 0.2421875, 0.2578125, -0.8984375, 0.765625, 0.8984375, 0.625, -0.328125, 0.921875, 0.0234375, 0.96875, 0.8828125, 0.6796875, -0.2109375, -0.0234375, -0.4609375, -0.609375, -0.4609375, -0.9921875, -0.3515625, 0.203125, -0.9453125, 0.1875, 0.90625, -0.1640625, -0.1328125, -0.5390625, -0.328125, 0.484375, 0.140625, -0.0625, -0.6328125, 0.6796875, 0.7734375, 0.1171875, 0.828125, 0.953125, 0.4296875, -0.4296875, -0.9609375, -0.59375, 0.78125, 0.546875, 0.3359375, -0.640625, 0.734375, -0.4140625, -0.2890625, -0.0078125, -0.75, 0.7265625, 0.7578125, 0.25, -0.609375, 0.78125, -0.8671875, 0.8515625, 0.234375, 0.6875, -0.9140625, -0.5859375, 0.984375, 0.8203125, -0.3984375, 0.8125, 0.375, -0.265625, 0.203125, -0.6484375, 0.296875, -0.2265625, 0.1875, 0.453125, 0.8046875, 0.390625, -0.765625, 0.1875, 0.328125, 0.875, 0.40625, 0.953125, -0.4296875, -0.9765625, -0.4140625, 0.7109375, -0.03125, -0.09375, -0.3046875, -0.46875, -0.015625, -0.890625, 0.2421875, 0.046875, -0.9296875, -0.40625, -0.0859375, -0.6484375, -0.484375, 0.84375, -0.765625, 0.6328125, -0.921875, -0.796875, 0.78125, 0.75, -0.59375, -0.6171875, 0.171875, 0.65625, -0.6640625, 0.1484375, -0.0546875, -0.0703125, -0.6953125, -0.859375, 0.953125, 0.25, 0.5625, -0.40625, 0.21875, 0.3828125, 0.3984375, 0.8984375, 0.859375, 0.859375, -0.0234375, 0.8125, -0.375, 0.2265625, 0.9765625, 0.2109375, 0.7265625, 0.296875, -0.0546875, -0.3359375, -0.9765625, 0.234375, 0.546875, 0.9140625, 0.2734375, 0.578125, -0.3515625, 0.296875, -0.0703125, 0.2421875, 0.3203125, 0.75, -0.6328125, 0.203125, -0.5390625, 0.828125, 0.734375, -0.8671875, 0.8671875, 0.1015625, -0.1640625, -0.265625, -0.75, 0.1484375, -0.09375, -0.34375, 0.046875, -0.09375, 0.9765625, 0.296875, 0.6484375, -0.5234375, 0.7421875, 0.3828125, -0.53125, 0.359375, 0.921875, -0.2265625, 0.6796875, -0.46875, 0.1953125, -0.5625, -0.1640625, -0.046875, 0.4609375, 0.21875, -0.1875, 0.1015625, 0.921875, 0.7734375, -0.0078125, -0.8046875, 0.375, -0.265625, 0.3125, -0.4921875, 0.7890625, -0.9375, -0.59375, -0.5390625, -0.9375, -0.7109375, 0.5703125, -0.3125, 0.421875, 0.7890625, -0.015625, 0.5703125, -0.625, -0.7734375, 0, 0.2578125, -0.3046875, -0.4375, -0.375, -1, -0.0078125, -0.3046875, -0.046875, 0.796875, -0.890625, 0.484375, -0.3203125, -0.9296875, -0.90625, 0.6640625, 0.0078125, 0.1640625, -0.28125, -0.9375, -0.9609375, -0.4921875, -0.296875, -0.46875, 0.703125, -0.2265625, 0.953125, -0.7578125, 0.6328125, 0.0546875, 0.796875, 0.84375, -0.640625, 0.4765625, -0.7890625, 0.8515625, 0.953125, 0.4296875, -0.3125, -0.7265625, -0.484375, 0.5859375, -0.5703125, 0.4921875, -0.3203125, 0.1953125, 0.046875, 0.96875, -0.2890625, -0.109375, 0.96875, -0.3515625, -0.9765625, 0.1015625, 0.3359375, 0.40625, -0.3984375, 0.4609375, -0.8046875, 0.9765625, 0.703125, -0.71875, 0.1640625, 0.2578125, -0.4296875, -0.0625, 0.4921875, 0.796875, 0.7421875, -0.1015625, -0.3984375, 0.046875, -0.2109375, -0.5625, 0.9140625, -0.4453125, 0.40625, 0.703125, 0.1328125, 0.3515625, 0.7734375, -0.640625, -0.875, 0.7109375, 0.3125, 0.609375, 0.875, -0.359375, -0.2734375, 0.734375, 0.609375, 0.3046875, 0.0625, -0.9765625, -0.125, -0.1796875, -0.2265625, -0.5078125, 0.90625, -0.8125, -0.0625, 0.25, 0.046875, -0.4375, 0.4453125, 0.9140625, 0.6328125, -0.1796875, -0.3984375, -0.6875, -0.125, -0.4453125, 0.9375, 0.3125, -0.7421875, 0.0546875, -0.2734375, 0.296875, 0.8359375, -0.859375, 0.375, 0.765625, 0.3515625, -0.71875, -0.890625, -0.90625, -0.6015625, -0.5, 0.15625, -0.4609375, 0.6171875, -0.5234375, 0.546875, 0.71875, 0.578125, 0.625, -0.8359375 };
        GLfloat y_[441] = { -0.9453125, -0.3203125, -0.984375, 0.765625, -0.6171875, 0.3359375, 0.328125, -0.5078125, 0.375, 0.671875, 0.359375, -0.390625, -0.390625, 0.2265625, -0.9765625, 0.9375, 0.9296875, 0.1015625, -0.6328125, 0.6953125, -0.3984375, 0.0859375, 0.21875, -0.7890625, 0.875, 0.4609375, -0.8046875, 0.4140625, 0.671875, -0.8671875, 0.7578125, 0.078125, -0.8515625, -0.15625, 0.53125, 0.015625, -0.6953125, -0.3359375, -0.6640625, -0.0234375, -0.0390625, 0.7578125, -0.625, -0.828125, 0.5390625, -0.5625, 0.6171875, -0.203125, -0.015625, -0.6171875, 0.4609375, 0.9375, 0.046875, 0.5546875, -0.9375, 0.0546875, 0.875, 0.5703125, -0.9609375, 0.7890625, -0.9609375, 0.1171875, 0.359375, -0.421875, -0.265625, 0.515625, 0.578125, 0.59375, -0.7890625, -0.3046875, -0.9140625, 0.0078125, -0.3671875, 0.671875, -0.328125, -0.4296875, 0.296875, -0.1875, 0.875, 0.5546875, 0.8515625, -0.1484375, -0.15625, 0.671875, 0.9375, -0.84375, -0.96875, -0.90625, 0.609375, 0.2421875, -0.4453125, 0.3203125, 0.703125, 0, -0.15625, 0.9609375, -0.9921875, -0.6015625, -0.6953125, 0.140625, -0.328125, -0.7578125, 0.6953125, 0.125, -0.578125, -0.7421875, 0.1484375, 0.9921875, 0.2734375, 0.5078125, 0.984375, -0.2265625, -0.671875, -0.5625, 0.4375, -0.3125, 0.84375, -0.78125, 0.609375, -0.2421875, -0.6875, -0.1640625, -0.6171875, -0.6796875, -0.8671875, -0.9140625, -0.453125, 0.28125, 0.4609375, -0.578125, 0.9609375, 0.9609375, 0.734375, -0.9609375, 0.515625, -0.28125, 0.0390625, 0.875, -0.0859375, 0.078125, -0.2109375, -0.359375, -0.984375, -0.15625, 0.015625, -0.8671875, 0.765625, -0.8515625, 0.8984375, 0.640625, 0.3515625, 0.4296875, 0.015625, 0.96875, -0.90625, 0.953125, 0.5234375, 0.8125, 0.7265625, -0.3984375, 0.1484375, -0.125, 0.2265625, -0.171875, -0.4453125, 0.46875, 0.1875, -0.1953125, 0.5859375, 0.078125, -0.1953125, -0.46875, -0.4765625, -0.15625, -0.6171875, 0.2890625, 0.4375, -0.875, 0.75, -0.9296875, 0.890625, 0.484375, -0.9375, -0.8046875, 0.4375, -0.7890625, -0.109375, 0.234375, 0.1015625, 0.1484375, -0.2421875, 0.125, -0.7421875, -0.5234375, 0.21875, 0.796875, -0.65625, 0.890625, -0.734375, 0.078125, 0.6953125, 0.046875, -0.03125, -0.1875, 0.5078125, -0.4140625, -0.984375, 0.203125, 0.265625, 0.9765625, -0.296875, 0.2734375, 0.828125, -0.453125, 0.03125, -0.8359375, 0.625, -0.65625, 0.0234375, 0.6640625, 0.0234375, -0.78125, -0.4765625, 0.3515625, -0.828125, -0.203125, -0.0234375, -0.3984375, -0.125, 0.1171875, 0.171875, 0.3984375, -0.484375, -0.671875, -0.71875, -0.3671875, -0.09375, 0.890625, -0.5625, -0.7109375, 0.5859375, -0.859375, -0.96875, 0.4140625, -0.8515625, -0.6640625, 0.1484375, 0.328125, 0.2734375, 0.2265625, -0.1328125, -0.703125, 0.9921875, -0.796875, -0.0390625, 0.0703125, 0.1015625, -0.0625, 0.703125, -0.75, 0.171875, 0.15625, -0.7890625, -0.515625, -0.8359375, 0.9453125, 0.75, 0.625, -0.296875, 0.84375, 0.4296875, 0.3125, 0.9453125, 0.8828125, 0.8046875, 0.2734375, -0.390625, 0.34375, 0.8203125, -0.78125, -0.6796875, 0.7421875, 0.09375, -0.2109375, 0.2578125, 0.09375, -0.5703125, 0.6953125, 0.4375, -0.7734375, -0.515625, -0.4609375, -0.1796875, 0.6640625, -0.7109375, 0.5703125, 0.1953125, 0.8515625, 0.9140625, -0.09375, -0.46875, 0.0234375, 0.0234375, -0.6953125, 0.265625, 0.2578125, 0.25, -0.28125, -0.78125, 0.015625, -0.4375, 0.2265625, -0.3671875, -0.0625, 0.6484375, -0.953125, 0.0625, 0.34375, 0.515625, 0.046875, -0.921875, 0.3515625, 0.1171875, -0.7890625, -0.984375, 0.1484375, 0.25, -0.0234375, -0.5, 0.6953125, -0.796875, 0.515625, 0.3515625, -0.09375, -0.2890625, -0.46875, -0.828125, -0.6171875, 0.921875, -0.8828125, 0.4140625, 0.984375, 0.6328125, -0.203125, 0.203125, -0.6328125, -0.4375, -0.2109375, -0.921875, -0.7421875, 0.21875, 0.296875, 0.984375, -0.171875, -0.109375, -0.921875, 0.0703125, -0.4296875, -0.3359375, -0.5546875, 0.625, 0.1328125, 0.078125, -0.2421875, -0.59375, -0.0234375, -0.484375, 0.6796875, 0.1640625, -0.1484375, -0.4375, -0.0078125, -0.3125, -0.484375, -0.4921875, -0.8046875, 0.40625, 0.640625, -0.796875, 0.5390625, -0.1171875, -0.3046875, 0.5390625, -0.4453125, 0.7109375, 0.2578125, 0.78125, -0.328125, -0.84375, 0.1328125, -0.8671875, 0.25, 0.9453125, -0.2890625, 0.109375, -0.1640625, -0.8359375, -0.9453125, -0.9921875, -0.0703125, 0.0390625, 0.8359375, -0.046875, -0.5, 0.421875, 0.0625, 0.8671875, -0.9375, 0.9375, -0.6875, 0.0078125, 0.84375, -0.828125, -0.2890625, 0.65625, 0.9453125, -0.0859375, -0.3671875, -0.5, -0.1171875, -0.234375, -0.609375, 0.3515625, -0.3828125, 0.09375, -0.125, 0.0859375, 0.1796875, 0.6796875, 0.8046875, 0.8359375, 0.1953125, -0.703125, -0.3046875, -0.140625, 0.7109375, 0.8203125, 0.46875, 0.609375, 0.2890625, 0.5390625 };

        GLuint x_texture_id;
        GLuint y_texture_id;

    public:
        void Init(float screenquad_width, float screenquad_height) {

            // set screenquad size
            this->screenquad_width_ = screenquad_width;
            this->screenquad_height_ = screenquad_height;

            // compile the shaders
            program_id_ = icg_helper::LoadShaders("screenquad_vshader.glsl",
                                                  "screenquad_fshader.glsl");
            if(!program_id_) {
                exit(EXIT_FAILURE);
            }

            glUseProgram(program_id_);

            // vertex one vertex Array
            glGenVertexArrays(1, &vertex_array_id_);
            glBindVertexArray(vertex_array_id_);

            // vertex coordinates
            {
                const GLfloat vertex_point[] = { /*V1*/ -100.0f, -100.0f, 0.0f,
                                                 /*V2*/ +100.0f, -100.0f, 0.0f,
                                                 /*V3*/ -100.0f, +100.0f, 0.0f,
                                                 /*V4*/ +100.0f, +100.0f, 0.0f};
                // buffer
                glGenBuffers(1, &vertex_buffer_object_);
                glBindBuffer(GL_ARRAY_BUFFER, vertex_buffer_object_);
                glBufferData(GL_ARRAY_BUFFER, sizeof(vertex_point),
                             vertex_point, GL_STATIC_DRAW);

                // attribute
                GLuint vertex_point_id = glGetAttribLocation(program_id_, "vpoint");
                glEnableVertexAttribArray(vertex_point_id);
                glVertexAttribPointer(vertex_point_id, 3, GL_FLOAT, DONT_NORMALIZE,
                                      ZERO_STRIDE, ZERO_BUFFER_OFFSET);
            }

            // texture coordinates
            {
                const GLfloat vertex_texture_coordinates[] = { /*V1*/ 0.0f, 0.0f,
                                                               /*V2*/ 100.0f, 0.0f,
                                                               /*V3*/ 0.0f, 100.0f,
                                                               /*V4*/ 100.0f, 100.0f};

                // buffer
                glGenBuffers(1, &vertex_buffer_object_);
                glBindBuffer(GL_ARRAY_BUFFER, vertex_buffer_object_);
                glBufferData(GL_ARRAY_BUFFER, sizeof(vertex_texture_coordinates),
                             vertex_texture_coordinates, GL_STATIC_DRAW);

                // attribute
                GLuint vertex_texture_coord_id = glGetAttribLocation(program_id_,
                                                                     "vtexcoord");
                glEnableVertexAttribArray(vertex_texture_coord_id);
                glVertexAttribPointer(vertex_texture_coord_id, 2, GL_FLOAT,
                                      DONT_NORMALIZE, ZERO_STRIDE,
                                      ZERO_BUFFER_OFFSET);
            }


            {

                glGenTextures(1, &x_texture_id);
                glBindTexture(GL_TEXTURE_1D, x_texture_id);
                glTexImage1D(GL_TEXTURE_1D, 0, GL_R32F, 441, 0, GL_RED, GL_FLOAT, x_);
                glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
                glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
                glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
                GLuint tex_id = glGetUniformLocation(program_id_, "x");
                glUniform1i(tex_id, 0 /*GL_TEXTURE0*/);
            }

            {

                glGenTextures(1, &y_texture_id);
                glBindTexture(GL_TEXTURE_1D, y_texture_id);
                glTexImage1D(GL_TEXTURE_1D, 0, GL_R32F, 441, 0, GL_RED, GL_FLOAT, y_);
                glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
                glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
                glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
                GLuint tex_id = glGetUniformLocation(program_id_, "y");
                glUniform1i(tex_id, 1 /*GL_TEXTURE1*/);
            }

            // to avoid the current object being polluted
            glBindVertexArray(0);
            glUseProgram(0);
        }

        void Cleanup() {
            glBindVertexArray(0);
            glUseProgram(0);
            glDeleteBuffers(1, &vertex_buffer_object_);
            glDeleteProgram(program_id_);
            glDeleteVertexArrays(1, &vertex_array_id_);
        }

        void UpdateSize(int screenquad_width, int screenquad_height) {
            this->screenquad_width_ = screenquad_width;
            this->screenquad_height_ = screenquad_height;
        }

        void Draw() {
            glUseProgram(program_id_);
            glBindVertexArray(vertex_array_id_);

            // bind texture
            glActiveTexture(GL_TEXTURE0);
            glBindTexture(GL_TEXTURE_1D, x_texture_id);

            // bind texture
            glActiveTexture(GL_TEXTURE1);
            glBindTexture(GL_TEXTURE_1D, y_texture_id);

            // pass the subdivision
            glUniform1i(glGetUniformLocation(program_id_, "subdivision"), subdivision_);

            // pass the amplitude
            glUniform1f(glGetUniformLocation(program_id_, "amplitude"), amplitude_);

            // pass the lacunarity
            glUniform1f(glGetUniformLocation(program_id_, "lacunarity"), lacunarity_);

            // pass the octaves
            glUniform1i(glGetUniformLocation(program_id_, "octaves"), octaves_);

            // pass the sub_multiplier
            glUniform1f(glGetUniformLocation(program_id_, "sub_multiplier"), sub_multiplier_);

            // pass the offsets
            glUniform1f(glGetUniformLocation(program_id_, "offset_x"), offset_x_);
            glUniform1f(glGetUniformLocation(program_id_, "offset_y"), offset_y_);


            // draw
            glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);

            glBindVertexArray(0);
            glUseProgram(0);
        }

        void changeSubdivision(int change) {
            subdivision_ += change;
            cout << "changeSubdivision(): " << subdivision_ << endl;
        }

        void increaseAmplitude() {
            amplitude_ *= 1.125f;
            cout << "increaseAmplitude(): " << amplitude_ << endl;
        }

        void decreaseAmplitude() {
            amplitude_ /= 1.125f;
            cout << "decreaseAmplitude(): " << amplitude_ << endl;
        }

        void changeLacunarity(float change) {
            lacunarity_ += change;
            cout << "changeLacunarity(): " << lacunarity_ << endl;
        }

        void changeOctaves(int change) {
            octaves_ += change;
            cout << "changeOctaves(): " << octaves_ << endl;
        }

        void increaseSubdivisionMultiplier(float change) {
            sub_multiplier_ *= change;
            cout << "increaseSubdivisionMultiplier(): " << sub_multiplier_ << endl;
        }

        void decreaseSubdivisionMultiplier(float change) {
            sub_multiplier_ /= change;
            cout << "decreaseSubdivisionMultiplier(): " << sub_multiplier_ << endl;
        }

        void move(float offset_x, float offset_y) {
            offset_x_ = fmax(offset_x_ + offset_x, 0.f);
            offset_y_ = fmax(offset_y_ + offset_y, 0.f);
        }

        void setOffsetXY(glm::vec2 off) {
            offset_x_ = off.x;
            offset_y_ = off.y;
        }
};
